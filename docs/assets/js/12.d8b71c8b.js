(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{366:function(s,t,a){s.exports=a.p+"assets/img/indexes.d040eb02.jpg"},402:function(s,t,a){"use strict";a.r(t);var e=a(42),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"数据库相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库相关"}},[s._v("#")]),s._v(" 数据库相关")]),s._v(" "),e("h3",{attrs:{id:"mysql-安装-初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-安装-初始化"}},[s._v("#")]),s._v(" mysql 安装&&初始化")]),s._v(" "),e("p",[e("em",[s._v("安装的mysql版本为 5.7")])]),s._v(" "),e("p",[s._v("安装步骤")]),s._v(" "),e("ol",[e("li",[s._v("官网下载 https://dev.mysql.com/downloads/file/?id=484900")]),s._v(" "),e("li",[s._v("解压zip包 mysql-8.0.15-winx64")]),s._v(" "),e("li",[s._v("配置path环境变量(到bin目录)")]),s._v(" "),e("li",[s._v("默认解压后没有my.ini文件，故新增my.ini文件，内容如下"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    [mysql]\n    # 设置mysql客户端默认字符集\n    default-character-set=utf8\n    [mysqld]\n    #设置3306端口\n    port = 3306\n    # 设置mysql的安装目录\n    basedir=D:\\\\soft\\\\mysql-5.7.25-winx64\n    # 允许最大连接数\n    max_connections=200\n    # 服务端使用的字符集默认为8比特编码的latin1字符集\n    character-set-server=utf8\n    # 创建新表时将使用的默认存储引擎\n    default-storage-engine=INNODB\n")])])])]),s._v(" "),e("li",[s._v("以管理员身份(否则没权限)运行cmd，cd到解压目录mysql-8.0.15-winx64")]),s._v(" "),e("li",[s._v("执行 "),e("strong",[s._v("mysqld --initialize-insecure")]),s._v(" 以初始化data文件夹")]),s._v(" "),e("li",[s._v("执行 "),e("strong",[s._v("mysqld --install")]),s._v(" 安装mysql服务")]),s._v(" "),e("li",[s._v("执行 "),e("strong",[s._v("net start mysql")]),s._v(" 启动mysql")]),s._v(" "),e("li",[e("em",[s._v("mysql5.7默认有随机密码")]),s._v(" 密码存放在 data目录下的 xxx.err文件内\n"),e("ul",[e("li",[s._v("搜索password is generated for root@localhost:可以找到默认密码")])])]),s._v(" "),e("li",[s._v("执行 "),e("strong",[s._v("mysql -u root -p")]),s._v(" 输入默认密码")]),s._v(" "),e("li",[s._v("执行 "),e("strong",[s._v("SET PASSWORD FOR 'root'@'localhost' = PASSWORD('');")]),s._v(" 修改默认root密码为空")])]),s._v(" "),e("h5",{attrs:{id:"java连接mysql异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java连接mysql异常"}},[s._v("#")]),s._v(" Java连接Mysql异常")]),s._v(" "),e("blockquote",[e("p",[s._v("This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'.")])]),s._v(" "),e("p",[s._v("将旧版本jdbc.propertiesd的"),e("code",[s._v("com.mysql.dbc.Driver")]),s._v("改成"),e("code",[s._v("com.mysql.cj.jdbc.Driver")])]),s._v(" "),e("blockquote",[e("p",[s._v("The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver")])]),s._v(" "),e("p",[s._v("需要配置服务器或JDBC驱动程序的时区")]),s._v(" "),e("p",[s._v("解决：")]),s._v(" "),e("ul",[e("li",[s._v("进入数据库，运行"),e("code",[s._v("set Global time_zone='+8:00'")])])]),s._v(" "),e("h3",{attrs:{id:"事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[s._v("#")]),s._v(" 事务")]),s._v(" "),e("blockquote",[e("p",[s._v("事务：指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)")])]),s._v(" "),e("p",[s._v("ps: "),e("code",[s._v("mongodb 4.0")]),s._v("版本之后支持事务管理")]),s._v(" "),e("p",[s._v("事务的四大特性：")]),s._v(" "),e("ol",[e("li",[s._v("原子性（Atomicity）: 事务要么全部完成，要么全部取消。 如果事务崩溃，状态回到事务之前（事务回滚）。")]),s._v(" "),e("li",[s._v("隔离性（Isolation）: 如果2个事务 T1 和 T2 同时运行，事务 T1 和 T2 最终的结果是相同的，不管 T1和T2谁先结束。")]),s._v(" "),e("li",[s._v("持久性（Durability）: 一旦事务提交，不管发生什么（崩溃或者出错），数据要保存在数据库中。")]),s._v(" "),e("li",[s._v("一致性（Consistency）: 只有合法的数据（依照关系约束和函数约束）才能写入数据库。")])]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[s._v("    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 开始一个事务")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" A "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" A "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("亿"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 伪sql，仅作示意")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" B "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" B "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("亿"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 其他读写操作")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 提交事务")]),s._v("\n")])])]),e("h3",{attrs:{id:"并发控制："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并发控制："}},[s._v("#")]),s._v(" 并发控制：")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/40211594",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),e("OutboundLink")],1)]),s._v(" "),e("h5",{attrs:{id:"悲观锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#悲观锁"}},[s._v("#")]),s._v(" 悲观锁")]),s._v(" "),e("p",[s._v("悲观锁：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁（先锁再访问 / 修改）")]),s._v(" "),e("p",[s._v("ps: Java中 "),e("code",[s._v("synchronized")]),s._v(" 和 "),e("code",[s._v("ReentrantLock")]),s._v(" 等独占锁就是悲观锁思想的实现。")]),s._v(" "),e("h5",{attrs:{id:"乐观锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁"}},[s._v("#")]),s._v(" 乐观锁")]),s._v(" "),e("p",[s._v("乐观锁：总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现")]),s._v(" "),e("p",[s._v("乐观锁的实现机制")]),s._v(" "),e("ol",[e("li",[s._v("版本号机制")])]),s._v(" "),e("p",[s._v("一般是在数据表中加上一个数据版本号 "),e("code",[s._v("version")]),s._v(" 字段，表示数据被修改的次数，当数据被修改时，"),e("code",[s._v("version")]),s._v(" 值会加一。当线程A要更新数据值时，在读取数据的同时也会读取 "),e("code",[s._v("version")]),s._v(" 值，在提交更新时，若刚才读取到的 "),e("code",[s._v("version")]),s._v(" 值为当前数据库中的 "),e("code",[s._v("version")]),s._v(" 值相等时才更新，否则重试更新操作，直到更新成功。")]),s._v(" "),e("p",[s._v("举一个简单的例子：\n假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。")]),s._v(" "),e("ol",[e("li",[s._v("操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。")]),s._v(" "),e("li",[s._v("在操作员 A 操作的过程中，操作员B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。")]),s._v(" "),e("li",[s._v("操作员 A 完成了修改工作，将数据版本号加一（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。")]),s._v(" "),e("li",[s._v("操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。")])]),s._v(" "),e("p",[s._v("这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。")]),s._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[s._v("CAS算法")])]),s._v(" "),e("p",[s._v("CAS算法：即 compare and swap（比较与交换），是一种有名的无锁算法。")]),s._v(" "),e("p",[s._v("无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。")]),s._v(" "),e("p",[s._v("CAS算法涉及到三个操作数")]),s._v(" "),e("ol",[e("li",[s._v("需要读写的内存值 "),e("code",[s._v("V")])]),s._v(" "),e("li",[s._v("进行比较的值 "),e("code",[s._v("A")])]),s._v(" "),e("li",[s._v("拟写入的新值 "),e("code",[s._v("B")])])]),s._v(" "),e("p",[s._v("当且仅当 "),e("code",[s._v("V")]),s._v(" 的值等于 "),e("code",[s._v("A")]),s._v(" 时，"),e("code",[s._v("CAS")]),s._v("通过原子方式用新值 "),e("code",[s._v("B")]),s._v(" 来更新 "),e("code",[s._v("V")]),s._v(" 的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。")]),s._v(" "),e("h5",{attrs:{id:"乐观锁的缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁的缺点"}},[s._v("#")]),s._v(" 乐观锁的缺点")]),s._v(" "),e("ol",[e("li",[s._v("ABA 问题")])]),s._v(" "),e("p",[s._v('如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 "ABA"问题。')]),s._v(" "),e("p",[s._v("JDK 1.5 以后的 "),e("code",[s._v("AtomicStampedReference")]),s._v(" 类就提供了此种能力，其中的 "),e("code",[s._v("compareAndSet")]),s._v(" 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。")]),s._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[s._v("循环时间长开销大")])]),s._v(" "),e("p",[s._v("自旋CAS（也就是不成功就一直循环执行直到成功）如果长时间不成功，会给CPU带来非常大的执行开销。")]),s._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[s._v("只能保证一个共享变量的原子操作")])]),s._v(" "),e("p",[s._v("CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5开始，提供了"),e("code",[s._v("AtomicReference")]),s._v(" 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用 "),e("code",[s._v("AtomicReference")]),s._v(" 类把多个共享变量合并成一个共享变量来操作。")]),s._v(" "),e("h3",{attrs:{id:"数据库索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库索引"}},[s._v("#")]),s._v(" 数据库索引")]),s._v(" "),e("blockquote",[e("p",[s._v("数据库索引是为了增加查询速度而对表字段附加的一种标识。")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/23624390",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("大多数DB厂商实现索引都是基于一种数据结构——B树。B树，是一种"),e("strong",[s._v("平衡的多叉树")]),s._v("。B树的特点就是适合在磁盘等直接存储设备上组织"),e("strong",[s._v("动态查找表")]),s._v("。")]),s._v(" "),e("p",[s._v("一个没加主键的表，它的数据无序的放置在磁盘存储器上，一行一行的排列的很整齐， 跟我认知中的「表」很接近。如果给表上了主键，那么表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是上面说的「平衡树」结构，换句话说，就是整个表就变成了一个索引，也就是所谓的 -> "),e("code",[s._v("聚集索引")])]),s._v(" "),e("p",[e("img",{attrs:{src:a(366),alt:"索引"}})]),s._v(" "),e("h5",{attrs:{id:"索引的种类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引的种类"}},[s._v("#")]),s._v(" 索引的种类")]),s._v(" "),e("ol",[e("li",[s._v("聚集索引")]),s._v(" "),e("li",[s._v("常规索引，（非聚合索引）")]),s._v(" "),e("li",[s._v("覆盖索引，（复合索引、多字段索引查询）")])]),s._v(" "),e("h5",{attrs:{id:"索引的好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引的好处"}},[s._v("#")]),s._v(" 索引的好处")]),s._v(" "),e("ol",[e("li",[s._v("通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性")]),s._v(" "),e("li",[s._v("可以大大加快数据的检索速度")]),s._v(" "),e("li",[s._v("可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义")])]),s._v(" "),e("h5",{attrs:{id:"为什么加索引查找会快？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么加索引查找会快？"}},[s._v("#")]),s._v(" 为什么加索引查找会快？")]),s._v(" "),e("p",[s._v("索引就像书的目录， 通过书的目录就准确的定位到了书籍具体的内容")]),s._v(" "),e("ul",[e("li",[s._v("DB在执行一条Sql语句的时候，默认的方式是根据搜索条件进行全表扫描，遇到匹配条件的就加入搜索结果集合。")]),s._v(" "),e("li",[s._v("如果我们对某一字段增加索引，查询时就会先去索引列表中一次定位到特定值的行数，大大减少遍历匹配的行数，所以能明显增加查询的速度。")])]),s._v(" "),e("p",[s._v("假如一张表有一亿条数据 ，需要查找其中某一条数据，按照常规逻辑， 一条一条的去匹配的话， 最坏的情况下需要匹配一亿次才能得到结果，用大O标记法就是O(n)最坏时间复杂度，这是无法接受的。")]),s._v(" "),e("p",[s._v("而且这一亿条数据显然不能一次性读入内存供程序使用， 因此， 这一亿次匹配在不经缓存优化的情况下就是一亿次IO开销，以现在磁盘的IO能力和CPU的运算能力， 有可能需要几个月才能得出结果。")]),s._v(" "),e("p",[s._v("如果把这张表转换成平衡树结构（一棵非常茂盛和节点非常多的树），假设这棵树有10层，那么只需要10次IO开销就能查找到所需要的数据。")]),s._v(" "),e("h5",{attrs:{id:"为什么加索引后会使写入、修改、删除变慢？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么加索引后会使写入、修改、删除变慢？"}},[s._v("#")]),s._v(" 为什么加索引后会使写入、修改、删除变慢？")]),s._v(" "),e("p",[s._v("因为平衡树这个结构必须一直维持在一个正确的状态， 增删改数据都会改变平衡树各节点中的索引数据内容，破坏树结构， 因此，在每次数据改变时， DBMS（数据库管理系统）必须去重新梳理树（索引）的结构以确保它的正确，这会带来不小的性能开销，也就是为什么索引会给查询以外的操作带来副作用的原因。")]),s._v(" "),e("h5",{attrs:{id:"为啥不用二叉查找树呢？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为啥不用二叉查找树呢？"}},[s._v("#")]),s._v(" 为啥不用二叉查找树呢？")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/87124501",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("如果是查找效率（即比较次数）的话，实际上二叉树可以说是最快的了，但是，我们的文件索引是存放在磁盘上的，所以我们不仅要考虑查找效率，还要考虑"),e("strong",[s._v("磁盘的寻址加载次数")])]),s._v(" "),e("p",[s._v("首先磁盘里的数据加载到内存中的时候，是以页为单位来加载的，而节点与节点之间的数据是不连续的，"),e("strong",[s._v("所以不同的节点，很有可能分布在不同的磁盘页中")])]),s._v(" "),e("p",[s._v("并且内存的运算速度是非常快的，至少比磁盘的寻址加载速度，快了几百倍。我们进行数值比较的时候，是在内存中进行的，虽然 B 树的比较次数可能比二叉查找树多，但是磁盘操作次数少，所以总体来说，还是 B 树快的多。")]),s._v(" "),e("h5",{attrs:{id:"非聚合索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非聚合索引"}},[s._v("#")]),s._v(" 非聚合索引")]),s._v(" "),e("p",[e("code",[s._v("非聚合索引")]),s._v("，也就是所谓的"),e("code",[s._v("常规索引")])]),s._v(" "),e("p",[s._v("如果给表中多个字段加上索引，那么就会出现多个独立的索引结构，每个索引（非聚集索引）互相之间不存在关联。每次给字段建一个新索引，字段中的数据就会被复制一份出来，用于生成索引。 因此，给表添加索引，会增加表的体积， 占用磁盘存储空间。")]),s._v(" "),e("p",[s._v("非聚集索引和聚集索引的区别在于，通过聚集索引可以查到需要查找的数据，而通过非聚集索引可以查到记录对应的主键值 ，再使用主键的值通过聚集索引查找到需要的数据。")]),s._v(" "),e("p",[e("strong",[s._v("不管以任何方式查询表， 最终都会利用主键通过聚集索引来定位到数据， 聚集索引（主键）是通往真实数据所在的唯一路径。")]),s._v("，")]),s._v(" "),e("p",[s._v("然而， 有一种例外可以不使用聚集索引就能查询出所需要的数据， 这种非主流的方法 称之为 "),e("code",[s._v("覆盖索引")]),s._v(" 查询， 也就是平时所说的 "),e("code",[s._v("复合索引")]),s._v(" 或者 "),e("code",[s._v("多字段索引查询")]),s._v("。")]),s._v(" "),e("p",[s._v("当为字段建立索引以后， 字段中的内容会被同步到索引之中，如果为一个索引指定两个字段，那么这个两个字段的内容都会被同步至索引之中。")]),s._v(" "),e("h5",{attrs:{id:"索引的反例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引的反例"}},[s._v("#")]),s._v(" 索引的反例")]),s._v(" "),e("ol",[e("li",[s._v("如果每次都需要取到所有表记录，无论如何都必须进行全表扫描了，那么是否加索引也没有意义了")]),s._v(" "),e("li",[s._v("对非唯一的字段，例如“性别”这种大量重复值的字段，增加索引也没有什么意义")]),s._v(" "),e("li",[s._v("对于记录比较少的表，增加索引不会带来速度的优化反而浪费了存储空间，因为索引是需要存储空间的\n"),e("ul",[e("li",[s._v("而且有个致命缺点是对于update/insert/delete的每次执行，字段的索引都必须重新计算更新。")])])])]),s._v(" "),e("h5",{attrs:{id:"不走索引的情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不走索引的情况"}},[s._v("#")]),s._v(" 不走索引的情况")]),s._v(" "),e("p",[s._v("有以下索引")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[s._v("    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'idx_age'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'age'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'idx_name'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'name'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("ol",[e("li",[s._v("索引用来计算不走索引")])]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[s._v("    A:"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\n    B:"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("列用函数不走索引")])]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[s._v("    A:"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" concat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'王哈'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'哈'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    B:"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("  concat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'name'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'哈'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'王哈哈'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A走索引、B不走索引")]),s._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[e("code",[s._v("!=")]),s._v(" 不走索引")])]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[s._v("    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# != 不走索引")]),s._v("\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[s._v("Like的 % 在前面的不走索引")])]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[s._v("    A:"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'name'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'王%'")]),s._v("\n    B:"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'name'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%小'")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A走索引、B不走索引")]),s._v("\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[s._v("隐式转换导致不走索引")])])])}),[],!1,null,null,null);t.default=r.exports}}]);