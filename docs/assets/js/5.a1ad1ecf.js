(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{348:function(t,s,a){t.exports=a.p+"assets/img/unshift.2278dd9b.png"},349:function(t,s,a){t.exports=a.p+"assets/img/stack.05aea686.png"},350:function(t,s,a){t.exports=a.p+"assets/img/log.8762d8b3.png"},377:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"算法基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法基础"}},[t._v("#")]),t._v(" 算法基础")]),t._v(" "),e("h2",{attrs:{id:"基础知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),e("h3",{attrs:{id:"数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),e("blockquote",[e("p",[t._v("数据结构是在计算机中组织数据以便有效使用的一种特殊方式。")])]),t._v(" "),e("p",[t._v("常用的数据结构：数组和链表")]),t._v(" "),e("ul",[e("li",[t._v("链表的好处：可以随意穿插元素，只需要替换next的内容就可以了。\n"),e("ul",[e("li",[t._v("链表读取的运行时间是 O(n)")]),t._v(" "),e("li",[t._v("链表插入的运行时间是 O(1)")])])]),t._v(" "),e("li",[t._v("数组的好处：数组知道每一个元素的地址，而链表需要从头开始遍历。\n"),e("ul",[e("li",[t._v("数组读取的运行时间是 O(1)")]),t._v(" "),e("li",[t._v("数组插入的运行时间是 O(n)")])])])]),t._v(" "),e("p",[t._v("可能有人会问：在JavaScript中表示已经有"),e("code",[t._v("splice")]),t._v("可以实现增删改查了吗？为什么还需要链表呢？这里分析下 "),e("code",[t._v("splice")]),t._v(" 的内部实现（顺便提一下"),e("code",[t._v("unshift")]),t._v("）")]),t._v(" "),e("p",[t._v("首先要从堆栈开始说，如果你创建了一个数组那么从本质上讲你是在告诉系统需要在内存中开辟多大的堆栈分配空间。当你使用 "),e("code",[t._v("push")]),t._v(" 时数据会被添加到堆栈的末尾，此时系统发现空间不够大将，然后它分配一个新的空间并将数据复制到新空间，这也就是java的数组为什么一定要指定长度的原因。")]),t._v(" "),e("p",[t._v("然后说 "),e("code",[t._v("splice")]),t._v(" 和 "),e("code",[t._v("unshift")]),t._v("，按照上面的推理：系统如何在数组的前面或者中间开辟一个空间呢？因为数组的内存可以看成一个线性的空间，如果要在数据堆栈已经被占用的情况下在前面添加一个元素，那么必须要将前面的元素位置后移，即从"),e("code",[t._v("N")]),t._v("迁移到"),e("code",[t._v("N+1")]),t._v("，也就是说使用 "),e("code",[t._v("unshift")]),t._v(" 和 "),e("code",[t._v("splice")]),t._v(" 的时候会重新分配内存并复制数据。")]),t._v(" "),e("p",[t._v("下图是 unshift 和 push 的性能曲线，unshift 近似指数型增长")]),t._v(" "),e("p",[e("img",{attrs:{src:a(348),alt:"unshift"}})]),t._v(" "),e("h3",{attrs:{id:"调用栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调用栈"}},[t._v("#")]),t._v(" 调用栈")]),t._v(" "),e("p",[t._v("栈也是一种数据结构，它是一种运算受限的线性表，限定在表尾进行插入和删除。向栈顶插入元素叫"),e("code",[t._v("入栈")]),t._v("，从栈顶删除元素叫"),e("code",[t._v("出栈")])]),t._v(" "),e("p",[t._v("而调用栈是计算机科学中存储有关正在运行的子程序的消息的栈，几乎所有计算机程序都依赖于调用栈。调用栈的主要功能是"),e("strong",[t._v("存放返回地址")])]),t._v(" "),e("p",[t._v("现在有以下代码：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" me "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mokou'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAgeByName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAgeByName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" age"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("这个时候调用栈应该是这样的：")]),t._v(" "),e("ol",[e("li",[t._v("当 a() 执行后： "),e("code",[t._v("['a-> me:Mokou', 'a-> age: ?getAgeByName']")])]),t._v(" "),e("li",[t._v("然后执行 getAgeByName： "),e("code",[t._v("['a-> me:Mokou', 'a-> age: ?getAgeByName', 'getAgeByName-> name: Mokou', 'getAgeByName-> age: 16', 'getAgeByName-> result: Mokou16']")])]),t._v(" "),e("li",[t._v("当 getAgeByName(name) 执行完成："),e("code",[t._v("['a-> me:Mokou', 'a-> age: Mokou16']")])])]),t._v(" "),e("p",[t._v("再深入一点，举一个递归调用栈的栗子")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fact")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fact")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("使用一个图解算法中的案例：（灵魂画手正在路上）")]),t._v(" "),e("p",[e("img",{attrs:{src:a(349),alt:"stack"}})]),t._v(" "),e("p",[t._v("注意：调用栈中每个函数都有自己的变量：")]),t._v(" "),e("p",[t._v("既然说到了调用栈，这里就再举一反三谈谈js的作用域。")]),t._v(" "),e("p",[t._v("调用栈的用处：")]),t._v(" "),e("ol",[e("li",[t._v("异常捕获：由于是堆栈的形式，当一个函数出错时很方便的可以追溯到调用它的函数和一些其他出错信息。")])]),t._v(" "),e("h3",{attrs:{id:"大o表示法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#大o表示法"}},[t._v("#")]),t._v(" 大O表示法")]),t._v(" "),e("p",[t._v("什么是大O表示法？")]),t._v(" "),e("p",[t._v("大O表示法表示的是"),e("strong",[t._v("最糟糕的运行时间")]),t._v("，比如：普通遍历100个元素的数组，最少1次就找到元素，最多查找100次。这样去最糟糕运行时间，也就是时间复杂度为"),e("code",[t._v("O(n)")])]),t._v(" "),e("p",[t._v("为什么需要大O表示法？")]),t._v(" "),e("p",[t._v("算法的速度并非时间，而是操作数的增速。大O表示法可以更加直观的方式表示算法的计算效率。")]),t._v(" "),e("p",[t._v("比如：如果查询100个元素的list，普通遍历需要100次，二分法需要7次。看起来二分法的查找效率是普通遍历的15倍。而如果查询1亿个元素的list，二分法需要32次，通过上面得出的结论，普通遍历只需要 32*15 次，但是实际上是1亿次。用大O表示法，普通遍历是O(n)而二分法是O(log n)")]),t._v(" "),e("p",[t._v("常见的大O表示法运行时间")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("O(log n)")]),t._v("：对数时间，比如：二分法")]),t._v(" "),e("li",[e("code",[t._v("O(n)")]),t._v("：线性时间，比如：简单遍历")]),t._v(" "),e("li",[e("code",[t._v("O(n * log n)")]),t._v("：比如：快排")]),t._v(" "),e("li",[e("code",[t._v("O(n^2)")]),t._v("：比如：选择排序")]),t._v(" "),e("li",[e("code",[t._v("O(n!)")]),t._v("：n的阶乘，比如：旅行商问题")])]),t._v(" "),e("h3",{attrs:{id:"什么是对数-log-？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是对数-log-？"}},[t._v("#")]),t._v(" 什么是对数 log ？")]),t._v(" "),e("p",[e("img",{attrs:{src:a(350),alt:"log"}})]),t._v(" "),e("h2",{attrs:{id:"五大算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五大算法"}},[t._v("#")]),t._v(" 五大算法")]),t._v(" "),e("h3",{attrs:{id:"一、分治算法-（divide-and-conquer，简称：dc）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、分治算法-（divide-and-conquer，简称：dc）"}},[t._v("#")]),t._v(" 一、分治算法 （Divide And Conquer，简称：DC）")]),t._v(" "),e("blockquote",[e("p",[t._v("将规模为 N 的问题分解为 K 个规模较小的子问题，这些"),e("strong",[t._v("子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解")])])]),t._v(" "),e("p",[t._v("举例：")]),t._v(" "),e("h3",{attrs:{id:"二、动态规划算法（dynamic-programming，简称：dp）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、动态规划算法（dynamic-programming，简称：dp）"}},[t._v("#")]),t._v(" 二、动态规划算法（Dynamic Programming，简称：DP）")]),t._v(" "),e("blockquote",[e("p",[t._v("类似于分治算法，将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。与分治法不同的是，"),e("strong",[t._v("经分解得到子问题往往不是互相独立的")])])]),t._v(" "),e("p",[t._v("举例：斐波那契数列 0,1,1,2,3,5,8,13,…")]),t._v(" "),e("p",[t._v("它的每个数字都与前两个紧邻的数字相关。如果 F(n) 是第 n 个数字，那么我们会有 "),e("code",[t._v("F(n) = F(n-1) + F(n-2)")]),t._v("。这个在数学上称作"),e("em",[t._v("递归方程")]),t._v("或者"),e("em",[t._v("递推关系")]),t._v("。为了计算后面的项，它需要前面项的计算结果作为输入")]),t._v(" "),e("h3",{attrs:{id:"三、贪心算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、贪心算法"}},[t._v("#")]),t._v(" 三、贪心算法")]),t._v(" "),e("blockquote",[e("p",[t._v("在对问题求解时，"),e("strong",[t._v("总是做出在当前看来是最好的选择")]),t._v("。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解")])]),t._v(" "),e("p",[t._v("案例："),e("a",{attrs:{href:"https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2zsx1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("买卖股票的最佳时机 II"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。")]),t._v(" "),e("p",[t._v("设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。")]),t._v(" "),e("p",[t._v("注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。")]),t._v(" "),e("p",[t._v("示例 1:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("输入: [7,1,5,3,6,4]\n\n输出: 7\n\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n")])])]),e("p",[t._v("解题思路："),e("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("从第 i 天（这里 i >= 1）开始，与第 i - 1 的股价进行比较，如果股价有上升（严格上升），就将升高的股价（ prices[i] - prices[i- 1] ）记入总利润，按照这种算法，得到的结果就是符合题意的最大利润。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也就是说只要能赚钱就进行一次买卖。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" prices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" prices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" prices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  prices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" prices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("h3",{attrs:{id:"四、回溯算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、回溯算法"}},[t._v("#")]),t._v(" 四、回溯算法")]),t._v(" "),e("blockquote",[e("p",[t._v("回溯法是一种搜索算法，类似枚举的搜索尝试过程。复杂的，规模较大的问题都可以使用回溯法")])]),t._v(" "),e("p",[t._v("案例：八皇后问题")]),t._v(" "),e("h3",{attrs:{id:"五、分支限界法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、分支限界法"}},[t._v("#")]),t._v(" 五、分支限界法")]),t._v(" "),e("blockquote",[e("p",[t._v("回溯算法是深度优先，那么分支限界法就是广度优先的一个经典的例子。回溯法一般来说是遍历整个解空间，获取问题的所有解，而分支限界法则是获取一个解")])]),t._v(" "),e("h2",{attrs:{id:"算法技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法技巧"}},[t._v("#")]),t._v(" 算法技巧")]),t._v(" "),e("h3",{attrs:{id:"双指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双指针"}},[t._v("#")]),t._v(" 双指针")]),t._v(" "),e("blockquote",[e("p",[t._v("双指针在处理链表的时候特别有用")])]),t._v(" "),e("p",[t._v("案例1：判断单链表是否成环（快慢指针）")]),t._v(" "),e("p",[t._v("如果单链表成环，那么必定出现慢指针和快指针重合的情况")]),t._v(" "),e("p",[t._v("案例2: "),e("a",{attrs:{href:"https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2gy9m/",target:"_blank",rel:"noopener noreferrer"}},[t._v("删除排序数组中的重复项"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);